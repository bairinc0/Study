Проблема: 
класс Shape означает фигуру (не конкретную).
Мы можем создать объект класса Shape. То есть фактически мы создаём в программном коде объект Фигура (не квадрат или треугольник, а просто "Фигура")

Абстрактный класс - класс объявленный с ключевым словом abstract 
Пример:
abstract class Shape{}
Абстрактный класс является таким же классом как и обычные, но с некоторыми отличиями.
Отличия:
1) Нельзя создавать объект абстрактного класса
Shape s=new Shape();
2) В абстрактном классе можно объявить абстрактный метод
Пример:
abstract public void draw(int x,int y);
Примечание: 
а) Абстрактный метод не может быть реализован
б) Абстрактный метод ДОЛЖЕН быть реализован в потомках класса или потомок тоже должен быть абстрактным классом
Примечание 2: Абстрактные методы могут быть только в абстрактных классах.
Абстрактные классы часто применяются для реализации полиморфизма (для  указания общего типа) и инкапсуляции некоторых действий в базовом классе.

Интерфейсы
Задача:
Создадим абстрактный класс Animal
Создадим класс Horse с методом run()
Создадим класс Bird с методом fly()
Нужно создать класс Pegasus который будет иметь методы run() и fly()
По сути необходимо реализовать множественное наследование: класс Pegasus одновременно является как классом Horse так и классом Bird (то есть он должен унаследовать признаки обоих).
В языке Java нет множественного наследования.
Решения: 
1) унаследовать Pegasus от Horse и скопировать метод fly()
2) унаследовать Pegasus от Bird и скопировать метод run()
3) применить интерфейсы
Интерфейс объявляется при помощи служебного слова interface:
interface InterFaceName{
	Сигнатуры методов
}
Правила именования интерфейсов совпадают с правилами именования классов.
Интерфейсы содержат в себе описания (сигнатуры) методов.
Классы могут РЕАЛИЗОВЫВАТЬ интерфейс - то есть реализовывать ВСЕ методы указанные в теле интерфейса.
Класс может реализовывать сколько угодно интерфейсов.
Следовательно, если класс реализует интерфейс, то он имеет реализованные методы с ТОЙ ЖЕ сигнатурой что и указаны в интерфейсе.
Пример:
class Pegasus extends Animal implements Flyer,Runner{
	public void fly(){
		System.out.println("I can fly like Pegasus");
	}
	public void run(){
		System.out.println("I can run like Pegasus");
	}
}
Можно указать интерфейс как тип параметра функции и мы ничего не знаем про класс, который реализует его кроме того что он реализует функции этого интерфейса.
Классы реализующие интерфейс не обязаны находится в одной иерархии наследования.